{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"F:\\\\react learn\\\\widgets\\\\rstable\\\\App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Chance from 'chance';\nimport faker from 'faker';\nimport jsf from 'json-schema-faker';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { TableV } from \"./src/TableV\";\njsf.extend('faker', function () {\n  return faker;\n});\njsf.extend('chance', function () {\n  return new Chance();\n});\nvar schema = {\n  type: 'object',\n  properties: {\n    user: {\n      type: 'object',\n      properties: {\n        id: {\n          $ref: '#/definitions/positiveInt'\n        },\n        select: {\n          $ref: '#/definitions/positiveInt'\n        },\n        name: {\n          type: 'string',\n          faker: 'name.findName'\n        },\n        email: {\n          type: 'string',\n          chance: {\n            email: {\n              domain: 'vlinder.io'\n            }\n          }\n        },\n        phoneNumber: {\n          type: 'string',\n          chance: {\n            phone: {}\n          }\n        },\n        button: {\n          type: 'string',\n          faker: 'name.findName'\n        },\n        buttonColor: {\n          type: 'string'\n        },\n        action: [{\n          key: {\n            type: 'string'\n          }\n        }, {\n          key: {\n            type: 'string'\n          }\n        }]\n      },\n      required: ['id', 'name', 'email']\n    }\n  },\n  required: ['user'],\n  definitions: {\n    positiveInt: {\n      type: 'integer',\n      minimum: 0,\n      exclusiveMinimum: true\n    }\n  }\n};\n\nvar generateFakeData = function generateFakeData(schema) {\n  var rows,\n      res,\n      i,\n      sample,\n      _sample,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function generateFakeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          rows = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;\n          res = [];\n          _context.prev = 2;\n\n          if (!schema) {\n            _context.next = 15;\n            break;\n          }\n\n          i = 0;\n\n        case 5:\n          if (!(i < rows)) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(jsf.resolve(schema));\n\n        case 8:\n          sample = _context.sent;\n          _sample = _objectSpread({}, sample.user);\n          _sample.avatar = \"https://ui-avatars.com/api/?name=\" + _sample.name;\n          res.push(_sample);\n\n        case 12:\n          ++i;\n          _context.next = 5;\n          break;\n\n        case 15:\n          _context.next = 20;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](2);\n          console.log('error in fake data generation', _context.t0);\n\n        case 20:\n          return _context.abrupt(\"return\", res);\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 17]], Promise);\n};\n\nvar LENGTH_MENU = [{\n  value: 10,\n  label: 10\n}, {\n  value: 20,\n  label: 20\n}];\nvar columns = [{\n  label: 'ID',\n  dataKey: 'id',\n  summary: 4200,\n  summaryFormat: '0,0',\n  search: \"true\",\n  summaryStyle: {\n    color: 'red',\n    fontSize: 20\n  },\n  columnProps: {\n    width: 120,\n    sortable: false,\n    fixed: true\n  },\n  labelStyle: {\n    color: '#606161'\n  }\n}, {\n  label: 'Select',\n  dataKey: 'select',\n  appearance: 'checkbox',\n  appearanceProps: {\n    style: {}\n  },\n  columnProps: {\n    width: 200,\n    fixed: true\n  },\n  cellStyle: {},\n  labelStyle: {\n    color: '#606161'\n  }\n}, {\n  label: 'Full Name',\n  dataKey: 'name',\n  appearance: 'status',\n  appearanceProps: {\n    style: {},\n    dotStyle: {\n      backgroundColor: 'green',\n      borderRadius: 15,\n      width: 10,\n      height: 10,\n      marginRight: 5\n    }\n  },\n  columnProps: {\n    width: 200,\n    sortable: true,\n    fixed: true\n  },\n  cellStyle: {},\n  labelStyle: {\n    color: '#606161'\n  }\n}, {\n  label: 'Email',\n  dataKey: 'email',\n  appearance: 'email',\n  columnProps: {\n    width: 200,\n    sortable: true,\n    resizable: false,\n    search: true\n  },\n  labelStyle: {\n    color: '#606161'\n  }\n}, {\n  label: 'Phone Number',\n  dataKey: 'phoneNumber',\n  columnProps: {\n    width: 200,\n    sortable: true,\n    resizable: true\n  },\n  labelStyle: {\n    color: '#606161'\n  }\n}, {\n  label: 'Avatar',\n  dataKey: 'avatar',\n  appearance: 'avatar',\n  columnProps: {\n    width: 200\n  },\n  labelStyle: {\n    color: '#606161'\n  }\n}, {\n  label: 'Button',\n  dataKey: 'button',\n  appearance: 'button',\n  appearanceProps: {\n    color: 'orange'\n  },\n  columnProps: {\n    width: 200\n  },\n  labelStyle: {\n    color: '#606161'\n  }\n}, {\n  label: 'Action',\n  dataKey: 'action',\n  appearance: 'action',\n  appearanceProps: {\n    color: 'orange'\n  },\n  columnProps: {\n    width: 200\n  },\n  labelStyle: {\n    color: '#606161'\n  }\n}];\nexport default function App() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  React.useEffect(function () {\n    generateFakeData(schema, 15).then(function (res) {\n      console.log('result', res);\n      res && Array.isArray(res) && setData(_toConsumableArray(res));\n    });\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: '#fcfcfc',\n      height: '100vh',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 5\n    }\n  }, React.createElement(TableV, {\n    table: {\n      width: 900,\n      height: 500,\n      headerHeight: 80,\n      wordWrap: true,\n      data: _toConsumableArray(data)\n    },\n    checkedAppearance: true,\n    evenRowColor: '#d3d3d3',\n    columns: columns,\n    onPress: function onPress(key) {\n      return console.log('button Pressed', key);\n    },\n    onSelectRow: function onSelectRow(checkedKeys) {\n      return console.log('checked Keys', checkedKeys);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["F:/react learn/widgets/rstable/App.tsx"],"names":["Chance","faker","jsf","React","TableV","extend","schema","type","properties","user","id","$ref","select","name","email","chance","domain","phoneNumber","phone","button","buttonColor","action","key","required","definitions","positiveInt","minimum","exclusiveMinimum","generateFakeData","rows","res","i","resolve","sample","_sample","avatar","push","console","log","LENGTH_MENU","value","label","columns","dataKey","summary","summaryFormat","search","summaryStyle","color","fontSize","columnProps","width","sortable","fixed","labelStyle","appearance","appearanceProps","style","cellStyle","dotStyle","backgroundColor","borderRadius","height","marginRight","resizable","App","useState","data","setData","useEffect","then","Array","isArray","flex","flexDirection","justifyContent","alignItems","headerHeight","wordWrap","checkedKeys"],"mappings":"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","sourcesContent":["//@ts-nocheck\r\nimport Chance from 'chance';\r\nimport faker from 'faker';\r\nimport jsf from 'json-schema-faker';\r\nimport * as React from 'react';\r\nimport {View} from 'react-native';\r\nimport {TableHeaderDataProps, TableV} from './src/TableV';\r\n\r\njsf.extend('faker', () => faker);\r\njsf.extend('chance', () => new Chance());\r\n\r\nconst schema = {\r\n  type: 'object',\r\n  properties: {\r\n    user: {\r\n      type: 'object',\r\n      properties: {\r\n        id: {\r\n          $ref: '#/definitions/positiveInt',\r\n        },\r\n        select: {\r\n          $ref: '#/definitions/positiveInt',\r\n        },\r\n        name: {\r\n          type: 'string',\r\n          faker: 'name.findName',\r\n        },\r\n        email: {\r\n          type: 'string',\r\n          chance: {\r\n            email: {\r\n              domain: 'vlinder.io',\r\n            },\r\n          },\r\n        },\r\n        phoneNumber: {\r\n          type: 'string',\r\n          chance: {\r\n            phone: {},\r\n          },\r\n        },\r\n        button: {\r\n          type: 'string',\r\n          faker: 'name.findName',\r\n        },\r\n        buttonColor: {\r\n          type: 'string',\r\n        },\r\n        action: [\r\n          {\r\n            key: {\r\n              type: 'string',\r\n            },\r\n          },\r\n          {\r\n            key: {\r\n              type: 'string',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      required: ['id', 'name', 'email'],\r\n    },\r\n  },\r\n  required: ['user'],\r\n  definitions: {\r\n    positiveInt: {\r\n      type: 'integer',\r\n      minimum: 0,\r\n      exclusiveMinimum: true,\r\n    },\r\n  },\r\n};\r\n\r\nconst generateFakeData = async (schema, rows = 1) => {\r\n  let res = [];\r\n  try {\r\n    if (schema) {\r\n      for (let i = 0; i < rows; ++i) {\r\n        const sample = await jsf.resolve(schema);\r\n        let _sample = {...sample.user};\r\n        _sample.avatar = `https://ui-avatars.com/api/?name=${_sample.name}`;\r\n        res.push(_sample);\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log('error in fake data generation', err);\r\n  }\r\n  return res;\r\n};\r\n\r\nconst LENGTH_MENU = [\r\n  {\r\n    value: 10,\r\n    label: 10,\r\n  },\r\n  {\r\n    value: 20,\r\n    label: 20,\r\n  },\r\n];\r\n\r\nconst columns: TableHeaderDataProps[] = [\r\n  {\r\n    label: 'ID',\r\n    dataKey: 'id',\r\n    summary: 4200,\r\n    summaryFormat: '0,0', //Refer different format http://numeraljs.com/\r\n    search:\"true\",\r\n    summaryStyle: {\r\n      color: 'red',\r\n      fontSize: 20,\r\n    },\r\n    columnProps: {\r\n      width: 120,\r\n      sortable: false,\r\n      fixed: true,\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n  {\r\n    label: 'Select',\r\n    dataKey: 'select',\r\n    appearance: 'checkbox',\r\n    appearanceProps: {\r\n      style: {\r\n        // color: '#d3d3d3'\r\n      },\r\n    },\r\n    columnProps: {\r\n      width: 200,\r\n      fixed: true,\r\n    },\r\n    cellStyle: {\r\n      //  backgroundColor: '#d3d3d3'\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n\r\n  {\r\n    label: 'Full Name',\r\n    dataKey: 'name',\r\n    appearance: 'status',\r\n    appearanceProps: {\r\n      style: {\r\n        // color: '#d3d3d3'\r\n      },\r\n      dotStyle: {\r\n        backgroundColor: 'green',\r\n        borderRadius: 15,\r\n        width: 10,\r\n        height: 10,\r\n        marginRight: 5,\r\n      },\r\n    },\r\n    columnProps: {\r\n      width: 200,\r\n      sortable: true,\r\n      fixed: true,\r\n    },\r\n    cellStyle: {\r\n      //  backgroundColor: '#d3d3d3'\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n  {\r\n    label: 'Email',\r\n    dataKey: 'email',\r\n    appearance: 'email',\r\n    columnProps: {\r\n      width: 200,\r\n      sortable: true,\r\n      resizable: false,\r\n      search:true,\r\n\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n  {\r\n    label: 'Phone Number',\r\n    dataKey: 'phoneNumber',\r\n    columnProps: {\r\n      width: 200,\r\n      sortable: true,\r\n      resizable: true,\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n  {\r\n    label: 'Avatar',\r\n    dataKey: 'avatar',\r\n    appearance: 'avatar',\r\n    columnProps: {\r\n      width: 200,\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n  {\r\n    label: 'Button',\r\n    dataKey: 'button',\r\n    appearance: 'button',\r\n    appearanceProps: {\r\n      color: 'orange',\r\n    },\r\n    columnProps: {\r\n      width: 200,\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n  {\r\n    label: 'Action',\r\n    dataKey: 'action',\r\n    appearance: 'action',\r\n    appearanceProps: {\r\n      color: 'orange',\r\n    },\r\n    columnProps: {\r\n      width: 200,\r\n    },\r\n    labelStyle: {\r\n      color: '#606161',\r\n    },\r\n  },\r\n];\r\n\r\nexport default function App() {\r\n  const [data, setData] = React.useState<any>([]);\r\n  React.useEffect(() => {\r\n    generateFakeData(schema, 15).then(res => {\r\n      console.log('result', res);\r\n      res && Array.isArray(res) && setData([...res]);\r\n    });\r\n  }, []);\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#fcfcfc',\r\n        height: '100vh',\r\n        width: '100%',\r\n      }}\r\n    >\r\n      <TableV\r\n        // onRowClick={data => console.log(\"row clicked\", data)}\r\n        table={{\r\n          width: 900,\r\n          height: 500,\r\n          headerHeight: 80,\r\n          // rowHeight: 50,\r\n          wordWrap: true,\r\n          //cellBordered: true,\r\n          data: [...data],\r\n        }}\r\n        checkedAppearance={true}\r\n        evenRowColor={'#d3d3d3'}\r\n        columns={columns}\r\n        onPress={key => console.log('button Pressed', key)}\r\n        onSelectRow={checkedKeys => console.log('checked Keys', checkedKeys)}\r\n        // pagination={{\r\n        //   lengthMenu: LENGTH_MENU\r\n        // }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}